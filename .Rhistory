error = curr
)
errors = rbind(errors,
curr.tibble)
}
}
ggplot(data = errors, aes(x = n, y = p, fill = error)) +
geom_raster() +
scale_fill_viridis_c() +
theme_bw()
?sample
for(n in seq(100, 3000, 10)){ #For n in the sequence {100, 200, ..., 30000}
for(p in seq(0.01, 0.99, 0.01)){ #For p in the sequence {0.01, 0.02, ..., 0.99}
range.data = c()    #Where average of the ranges will be stored
n.p.sim2 <- tibble( #Tibble that stores the results of 100 simulations
n = numeric(),
p = numeric(),
range = numeric()
)
for(i in 1:100){ #With 100 simulations
data = rbinom(10000, n, p) / n #Simulate the data
range = (quantile(data, 0.975) - quantile(data, 0.025))/2 #Take the middle 95% of the data (range)
range.data = c(range.data, range) #stores the ranges of the 100 simulations
}
avg.range = mean(range.data) #Take the average of the 100 simulations (in terms of range)
n.p.sim2 = tibble(           #Store the averaged results here
n = n,
p = p,
average.range = avg.range
)
n.p.sim.avg = rbind(n.p.sim.avg, #Place the results as a column in our final dataframe
n.p.sim2)
}
}
n.p.sim.avg <- tibble(
n = numeric(),
p = numeric(),
average.range = numeric()
)
for(n in seq(100, 3000, 10)){ #For n in the sequence {100, 200, ..., 30000}
for(p in seq(0.01, 0.99, 0.01)){ #For p in the sequence {0.01, 0.02, ..., 0.99}
range.data = c()    #Where average of the ranges will be stored
n.p.sim2 <- tibble( #Tibble that stores the results of 100 simulations
n = numeric(),
p = numeric(),
range = numeric()
)
for(i in 1:100){ #With 100 simulations
data = rbinom(10000, n, p) / n #Simulate the data
range = (quantile(data, 0.975) - quantile(data, 0.025))/2 #Take the middle 95% of the data (range)
range.data = c(range.data, range) #stores the ranges of the 100 simulations
}
avg.range = mean(range.data) #Take the average of the 100 simulations (in terms of range)
n.p.sim2 = tibble(           #Store the averaged results here
n = n,
p = p,
average.range = avg.range
)
n.p.sim.avg = rbind(n.p.sim.avg, #Place the results as a column in our final dataframe
n.p.sim2)
}
}
View(n.p.sim.avg)
for(n in seq(100, 400, 10)){ #For n in the sequence {100, 200, ..., 30000}
for(p in seq(0.05, 0.95, 0.10)){ #For p in the sequence {0.01, 0.02, ..., 0.99}
range.data = c()    #Where average of the ranges will be stored
n.p.sim2 <- tibble( #Tibble that stores the results of 100 simulations
n = numeric(),
p = numeric(),
range = numeric()
)
for(i in 1:100){ #With 100 simulations
data = rbinom(10000, n, p) / n #Simulate the data
range = (quantile(data, 0.975) - quantile(data, 0.025))/2 #Take the middle 95% of the data (range)
range.data = c(range.data, range) #stores the ranges of the 100 simulations
}
avg.range = mean(range.data) #Take the average of the 100 simulations (in terms of range)
n.p.sim2 = tibble(           #Store the averaged results here
n = n,
p = p,
average.range = avg.range
)
n.p.sim.avg = rbind(n.p.sim.avg, #Place the results as a column in our final dataframe
n.p.sim2)
}
}
for(n in seq(100, 400, 100)){ #For n in the sequence {100, 200, ..., 30000}
for(p in seq(0.05, 0.95, 0.10)){ #For p in the sequence {0.01, 0.02, ..., 0.99}
range.data = c()    #Where average of the ranges will be stored
n.p.sim2 <- tibble( #Tibble that stores the results of 100 simulations
n = numeric(),
p = numeric(),
range = numeric()
)
for(i in 1:100){ #With 100 simulations
data = rbinom(10000, n, p) / n #Simulate the data
range = (quantile(data, 0.975) - quantile(data, 0.025))/2 #Take the middle 95% of the data (range)
range.data = c(range.data, range) #stores the ranges of the 100 simulations
}
avg.range = mean(range.data) #Take the average of the 100 simulations (in terms of range)
n.p.sim2 = tibble(           #Store the averaged results here
n = n,
p = p,
average.range = avg.range
)
n.p.sim.avg = rbind(n.p.sim.avg, #Place the results as a column in our final dataframe
n.p.sim2)
}
}
ggplot(data = n.p.sim.avg, aes(x = n, y = p, fill = average.range)) +
geom_raster() +
scale_fill_viridis_c() +
theme_bw()
for(n in seq(100, 3000, 10)){ #For n in the sequence {100, 200, ..., 30000}
for(p in seq(0.01, 0.99, 0.01)){ #For p in the sequence {0.01, 0.02, ..., 0.99}
range.data = c()    #Where average of the ranges will be stored
n.p.sim2 <- tibble( #Tibble that stores the results of 100 simulations
n = numeric(),
p = numeric(),
range = numeric()
)
for(i in 1:100){ #With 100 simulations
data = rbinom(10000, n, p) / n #Simulate the data
range = (quantile(data, 0.975) - quantile(data, 0.025))/2 #Take the middle 95% of the data (range)
range.data = c(range.data, range) #stores the ranges of the 100 simulations
}
avg.range = mean(range.data) #Take the average of the 100 simulations (in terms of range)
n.p.sim2 = tibble(           #Store the averaged results here
n = n,
p = p,
average.range = avg.range
)
n.p.sim.avg = rbind(n.p.sim.avg, #Place the results as a column in our final data frame
n.p.sim2)
}
}
View(n.p.sim.avg)
range = (quantile(samples1$observations, 0.975) - quantile(samples1$obsertvations, 0.025))/2
range2 = (quantile(samples1$observations2, 0.975) - quantile(samples1$obsertvations2, 0.025))/2
samples1 <- tibble(
observations = rbinom(10000, 1004, 0.39), #Take Samples using rbinom
obsertvations2 = rbinom(10000, 2008, 0.39)
)
range = (quantile(samples1$observations, 0.975) - quantile(samples1$obsertvations, 0.025))/2
range2 = (quantile(samples1$observations2, 0.975) - quantile(samples1$obsertvations2, 0.025))/2
View(samples1)
range = (quantile(samples1$observations, 0.975) - quantile(samples1$observations, 0.025))/2
range2 = (quantile(samples1$obsertvations2, 0.975) - quantile(samples1$obsertvations2, 0.025))/2
quantile(samples1$observations, 0.975)
quantile(samples1$observations, 0.975) - quantile(samples1$observations, 0.025)
View(samples1)
samples1 <- tibble(
observations = rbinom(10000, 1004, 0.39) / 1004, #Take Samples using rbinom
obsertvations2 = rbinom(10000, 2008, 0.39)  / 2008
)
View(samples1)
samples1 <- tibble(
observations = rbinom(10000, 1004, 0.39)/1004,     #Take Samples using rbinom
obsertvations2 = rbinom(10000, 2008, 0.39)/2008
)
samples1 <- tibble(
observations = rbinom(10000, 1004, 0.39),     #Take Samples using rbinom
obsertvations2 = rbinom(10000, 2008, 0.39)
) %>%
mutate(observations = observations/1004,
obertvations2 = obsertvations2/2008)
library(tidyverse)
set.seed(7272)
samples1 <- tibble(
observations = rbinom(10000, 1004, 0.39),     #Take Samples using rbinom
obsertvations2 = rbinom(10000, 2008, 0.39)
) %>%
mutate(observations = observations/1004,
obertvations2 = obsertvations2/2008)
View(samples1)
samples1 <- tibble(
observations = rbinom(10000, 1004, 0.39),     #Take Samples using rbinom
observations2 = rbinom(10000, 2008, 0.39)
) %>%
mutate(observations = observations/1004,
observations2 = obsertvations2/2008)
View(samples1)
samples1 <- tibble(
observations = rbinom(10000, 1004, 0.39),     #Take Samples using rbinom
observations2 = rbinom(10000, 2008, 0.39)
) %>%
mutate(observations = observations/1004,
observations2 = observations2/2008)
View(samples1)
range = (quantile(samples1$observations, 0.975) - quantile(samples1$observations, 0.025))/2
range2 = (quantile(samples1$obsertvations2, 0.975) - quantile(samples1$obsertvations2, 0.025))/2
range = ((quantile(samples1$observations, 0.975) - quantile(samples1$observations, 0.025))/2)*100
range2 = ((quantile(samples1$observations2, 0.975) - quantile(samples1$observations2, 0.025))/2)*100
samples1 <- tibble(
observations = rbinom(10000, 1004, 0.39),     #Take Samples using rbinom
observations2 = rbinom(10000, 2008, 0.39)
) %>%
mutate(observations = observations/1004,
observations2 = observations2/2008)
range = ((quantile(samples1$observations, 0.975) - quantile(samples1$observations, 0.025))/2)*100
range2 = ((quantile(samples1$observations2, 0.975) - quantile(samples1$observations2, 0.025))/2)*100
library(tidyverse)
set.seed(7272)
samples1 <- tibble(
observations = rbinom(10000, 1004, 0.39),     #Take Samples using rbinom
observations2 = rbinom(10000, 2008, 0.39)
) %>%
mutate(observations = observations/1004,
observations2 = observations2/2008)
range = ((quantile(samples1$observations, 0.975) - quantile(samples1$observations, 0.025))/2)*100
range2 = ((quantile(samples1$observations2, 0.975) - quantile(samples1$observations2, 0.025))/2)*100
ggplot(data = samples1) +
geom_histogram(aes(x=observations, y = after_stat(density))) +
geom_density(aes(x=observations), color = "red", size = 1)
range = quantile(samples1$observations, 0.975) - quantile(samples1$observations, 0.025)
range2 = quantile(samples1$observations2, 0.975) - quantile(samples1$observations2, 0.025)
range = c(quantile(samples1$observations, 0.975), quantile(samples1$observations, 0.025))
range2 = c(quantile(samples1$observations2, 0.975), quantile(samples1$observations2, 0.025))
error = ((quantile(samples1$observations, 0.975) - quantile(samples1$observations, 0.025))/2)*100
error2 = ((quantile(samples1$observations2, 0.975) - quantile(samples1$observations2, 0.025))/2)*100
ggplot(data = samples1) +
geom_histogram(aes(x=observations, y = after_stat(density))) +
geom_density(aes(x=observations), color = "red", size = 1)
ggplot(data = samples1) +
geom_histogram(aes(x=observations2, y = after_stat(density))) +
geom_density(aes(x=observations2), color = "red", size = 1)
gallup.samples <- tibble(
observations = c(rep(1, times = 392), rep(0, times = 592), rep(-1, times = 20))
)
sampled = c()
for(i in 1:1000){
curr.sample = sample(gallup.samples$observations, size = 1004, replace = TRUE)
sampled[i] = length(which(curr.sample == "1"))/length(curr.sample)
}
summary <- tibble(
prop.yes = sampled
)
ggplot(data = summary) +
geom_histogram(aes(x = prop.yes, y = after_stat(density))) +
geom_density(aes(x=prop.yes), color = "red", size = 1) +
geom_hline(yintercept = 0)
range = c(quantile(summary$prop.yes, 0.975), quantile(summary$prop.yes, 0.025))
error = ((quantile(summary$prop.yes, 0.975) - quantile(summary$prop.yes, 0.025))/2)*100
library(tidyverse)
set.seed(7272)
samples1 <- tibble(
observations = rbinom(10000, 1004, 0.39),     #Take Samples using rbinom
observations2 = rbinom(10000, 2008, 0.39)
) %>%
mutate(observations = observations/1004,
observations2 = observations2/2008)
range = c(quantile(samples1$observations, 0.975), quantile(samples1$observations, 0.025))
range2 = c(quantile(samples1$observations2, 0.975), quantile(samples1$observations2, 0.025))
error = ((quantile(samples1$observations, 0.975) - quantile(samples1$observations, 0.025))/2)*100
error2 = ((quantile(samples1$observations2, 0.975) - quantile(samples1$observations2, 0.025))/2)*100
ggplot(data = samples1) +
geom_histogram(aes(x=observations, y = after_stat(density))) +
geom_density(aes(x=observations), color = "red", size = 1)
ggplot(data = samples1) +
geom_histogram(aes(x=observations2, y = after_stat(density))) +
geom_density(aes(x=observations2), color = "red", size = 1)
gallup.samples <- tibble(
observations = c(rep(1, times = 392), rep(0, times = 592), rep(-1, times = 20))
)
sampled = c()
for(i in 1:1000){
curr.sample = sample(gallup.samples$observations, size = 1004, replace = TRUE)
sampled[i] = length(which(curr.sample == "1"))/length(curr.sample)
}
summary <- tibble(
prop.yes = sampled
)
range = c(quantile(summary$prop.yes, 0.975), quantile(summary$prop.yes, 0.025))
error = ((quantile(summary$prop.yes, 0.975) - quantile(summary$prop.yes, 0.025))/2)*100
range1 = c(quantile(summary$prop.yes, 0.975), quantile(summary$prop.yes, 0.025))
error1 = ((quantile(summary$prop.yes, 0.975) - quantile(summary$prop.yes, 0.025))/2)*100
for(n in seq(100, 3000, 10)){
for(p in seq(0.01, 0.99, 0.01)){
data = rbinom(10000, n, p) / n
range = (quantile(data, 0.975) - quantile(data, 0.025))\2
n.p.sim <- tibble(
n = numeric(),
p = numeric(),
range = numeric()
)
for(n in seq(100, 3000, 10)){
for(p in seq(0.01, 0.99, 0.01)){
data = rbinom(10000, n, p) / n
range = (quantile(data, 0.975) - quantile(data, 0.025))
range.data <- tibble(
n = n,
p = p,
range = range
)
n.p.sim <- rbind(n.p.sim,
range.data)
}
}
for(n in seq(100, 3000, 10)){
for(p in seq(0.01, 0.99, 0.01)){
data = rbinom(10000, n, p) / n
range = (quantile(data, 0.975) - quantile(data, 0.025))\2
library(tidyverse)
set.seed(7272)
samples1 <- tibble(
observations = rbinom(10000, 1004, 0.39),     #Take Samples using rbinom
observations2 = rbinom(10000, 2008, 0.39)
) %>%
mutate(observations = observations/1004,
observations2 = observations2/2008)
range = c(quantile(samples1$observations, 0.975), quantile(samples1$observations, 0.025))
range2 = c(quantile(samples1$observations2, 0.975), quantile(samples1$observations2, 0.025))
error = ((quantile(samples1$observations, 0.975) - quantile(samples1$observations, 0.025))/2)*100
error2 = ((quantile(samples1$observations2, 0.975) - quantile(samples1$observations2, 0.025))/2)*100
ggplot(data = samples1) +
geom_histogram(aes(x=observations, y = after_stat(density))) +
geom_density(aes(x=observations), color = "red", size = 1)
ggplot(data = samples1) +
geom_histogram(aes(x=observations2, y = after_stat(density))) +
geom_density(aes(x=observations2), color = "red", size = 1)
gallup.samples <- tibble(
observations = c(rep(1, times = 392), rep(0, times = 592), rep(-1, times = 20))
)
sampled = c()
for(i in 1:1000){
curr.sample = sample(gallup.samples$observations, size = 1004, replace = TRUE)
sampled[i] = length(which(curr.sample == "1"))/length(curr.sample)
}
summary <- tibble(
prop.yes = sampled
)
range = c(quantile(summary$prop.yes, 0.975), quantile(summary$prop.yes, 0.025))
error = ((quantile(summary$prop.yes, 0.975) - quantile(summary$prop.yes, 0.025))/2)*100
ggplot(data = summary) +
geom_histogram(aes(x = prop.yes, y = after_stat(density))) +
geom_density(aes(x=prop.yes), color = "red", size = 1) +
geom_hline(yintercept = 0)
n.p.sim <- tibble(
n = numeric(),
p = numeric(),
range = numeric()
)
for(n in seq(100, 3000, 10)){
for(p in seq(0.01, 0.99, 0.01)){
data = rbinom(10000, n, p) / n
range = (quantile(data, 0.975) - quantile(data, 0.025))\2
for(n in seq(100, 3000, 10)){
for(p in seq(0.01, 0.99, 0.01)){
data = rbinom(10000, n, p) / n
range = (quantile(data, 0.975) - quantile(data, 0.025))/2
range.data <- tibble(
n = n,
p = p,
range = range
)
n.p.sim <- rbind(n.p.sim,
range.data)
}
}
ggplot(data = n.p.sim, aes(x = n, y = p, fill = range)) +
geom_raster() +
theme_minimal() +
scale_fill_viridis_c()
errors = tibble(
n = numeric(),
p = numeric(),
error = numeric()
)
for(n in seq(100, 3000, 10)){
for(p in seq(0.01, 0.99, 0.01)){
curr = 1.96*((sqrt(n*p*(1-p)+1.96/4))/(n+1.96**2))
curr.tibble = tibble(
n = n,
p = p,
error = curr
)
errors = rbind(errors,
curr.tibble)
}
}
ggplot(data = errors, aes(x = n, y = p, fill = error)) +
geom_raster() +
scale_fill_viridis_c() +
theme_bw()
labs(x = porportions)
labs(x = "Porportions")
ggplot(data = samples1) +
geom_histogram(aes(x=observations, y = after_stat(density)), fill = "black") +
geom_density(aes(x=observations), color = "red", size = 1) +
geom_hline(yintercept = 0) +
theme_bw() +
labs(x = "Porportions")
ggplot(data = samples1) +
geom_histogram(aes(x=observations2, y = after_stat(density))) +
geom_density(aes(x=observations2), color = "red", size = 1) +
geom_hline(yintercept = 0) +
theme_bw() +
labs(x = "Porportions")
ggplot(data = samples1) +
geom_histogram(aes(x=observations2, y = after_stat(density)), fill = "black") +
geom_density(aes(x=observations2), color = "red", size = 1) +
geom_hline(yintercept = 0) +
theme_bw() +
labs(x = "Porportions")
ggplot(data = summary) +
geom_histogram(aes(x = prop.yes, y = after_stat(density))) +
geom_density(aes(x=prop.yes), color = "red", size = 1) +
geom_hline(yintercept = 0)
ggplot(data = summary) +
geom_histogram(aes(x = prop.yes, y = after_stat(density))) +
geom_density(aes(x=prop.yes), color = "red", size = 1) +
geom_hline(yintercept = 0) +
theme_bw() +
labs(x = "Porportions of Responses with Yes")
ggplot(data = summary) +
geom_histogram(aes(x = prop.yes, y = after_stat(density)), fill = "black") +
geom_density(aes(x=prop.yes), color = "red", size = 1) +
geom_hline(yintercept = 0) +
theme_bw() +
labs(x = "Porportions of Responses with Yes")
ggplot(data = n.p.sim, aes(x = n, y = p, fill = error)) +
geom_raster() +
theme_minimal() +
scale_fill_viridis_c() +
theme_bw()
library(tidyverse)
set.seed(7272)
samples1 <- tibble(
observations = rbinom(10000, 1004, 0.39),     #Take Samples using rbinom
observations2 = rbinom(10000, 2008, 0.39)
) %>%
mutate(observations = observations/1004,
observations2 = observations2/2008)
range = c(quantile(samples1$observations, 0.975), quantile(samples1$observations, 0.025))
range2 = c(quantile(samples1$observations2, 0.975), quantile(samples1$observations2, 0.025))
error = ((quantile(samples1$observations, 0.975) - quantile(samples1$observations, 0.025))/2)*100
error2 = ((quantile(samples1$observations2, 0.975) - quantile(samples1$observations2, 0.025))/2)*100
ggplot(data = samples1) +
geom_histogram(aes(x=observations, y = after_stat(density)), fill = "black") +
geom_density(aes(x=observations), color = "red", size = 1) +
geom_hline(yintercept = 0) +
theme_bw() +
labs(x = "Porportions")
ggplot(data = samples1) +
geom_histogram(aes(x=observations2, y = after_stat(density)), fill = "black") +
geom_density(aes(x=observations2), color = "red", size = 1) +
geom_hline(yintercept = 0) +
theme_bw() +
labs(x = "Porportions")
gallup.samples <- tibble(
observations = c(rep(1, times = 392), rep(0, times = 592), rep(-1, times = 20))
)
sampled = c()
for(i in 1:1000){
curr.sample = sample(gallup.samples$observations, size = 1004, replace = TRUE)
sampled[i] = length(which(curr.sample == "1"))/length(curr.sample)
}
summary <- tibble(
prop.yes = sampled
)
range = c(quantile(summary$prop.yes, 0.975), quantile(summary$prop.yes, 0.025))
error = ((quantile(summary$prop.yes, 0.975) - quantile(summary$prop.yes, 0.025))/2)*100
ggplot(data = summary) +
geom_histogram(aes(x = prop.yes, y = after_stat(density)), fill = "black") +
geom_density(aes(x=prop.yes), color = "red", size = 1) +
geom_hline(yintercept = 0) +
theme_bw() +
labs(x = "Porportions of Responses with Yes")
n.p.sim <- tibble(
n = numeric(),
p = numeric(),
range = numeric()
)
for(n in seq(100, 3000, 10)){
for(p in seq(0.01, 0.99, 0.01)){
data = rbinom(10000, n, p) / n
range = (quantile(data, 0.975) - quantile(data, 0.025))/2
range.data <- tibble(
n = n,
p = p,
error = range
)
n.p.sim <- rbind(n.p.sim,
range.data)
}
}
ggplot(data = n.p.sim, aes(x = n, y = p, fill = error)) +
geom_raster() +
theme_minimal() +
scale_fill_viridis_c() +
theme_bw()
errors = tibble(
n = numeric(),
p = numeric(),
error = numeric()
)
for(n in seq(100, 3000, 10)){
for(p in seq(0.01, 0.99, 0.01)){
curr = 1.96*((sqrt(n*p*(1-p)+1.96/4))/(n+1.96**2))
curr.tibble = tibble(
n = n,
p = p,
error = curr
)
errors = rbind(errors,
curr.tibble)
}
}
ggplot(data = errors, aes(x = n, y = p, fill = error)) +
geom_raster() +
scale_fill_viridis_c() +
theme_bw()
